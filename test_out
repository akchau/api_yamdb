============================= test session starts ==============================
platform linux -- Python 3.7.12, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- /home/netzen/sprint10/api_yamdb/venv/bin/python3
django: settings: api_yamdb.settings (from ini)
rootdir: /home/netzen/sprint10/api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup FAILED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup FAILED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup FAILED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data FAILED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted FAILED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted FAILED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated FAILED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated FAILED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated FAILED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin FAILED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search FAILED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only FAILED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin FAILED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin FAILED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin FAILED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin FAILED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator FAILED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user FAILED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted FAILED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin FAILED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator FAILED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user FAILED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser FAILED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions FAILED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin FAILED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin FAILED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user FAILED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth FAILED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin FAILED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin FAILED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin FAILED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user FAILED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator FAILED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth FAILED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre FAILED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete FAILED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission FAILED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user FAILED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator FAILED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth FAILED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail FAILED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission FAILED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth FAILED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

=================================== FAILURES ===================================
_________________ Test00UserRegistration.test_00_nodata_signup _________________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7f4418ee5dd0>
client = <django.test.client.Client object at 0x7f4418c97b50>

    @pytest.mark.django_db(transaction=True)
    def test_00_nodata_signup(self, client):
        request_type = "POST"
        response = client.post(self.url_signup)
    
>       assert (
            response.status_code != 404
        ), f"Страница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*"
E       AssertionError: Страница `/api/v1/auth/signup/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests/test_00_user_registration.py:18: AssertionError
---------------------------- Captured stdout setup -----------------------------
Operations to perform:
  Synchronize unmigrated apps: messages, staticfiles
  Apply all migrations: admin, auth, contenttypes, reviews, sessions, users
Synchronizing apps without migrations:
  Creating tables...
    Running deferred SQL...
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0001_initial... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying users.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying reviews.0001_initial... OK
  Applying sessions.0001_initial... OK
---------------------------- Captured stderr setup -----------------------------
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/auth/signup/
______________ Test00UserRegistration.test_00_invalid_data_signup ______________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7f4418ee9390>
client = <django.test.client.Client object at 0x7f44189eb3d0>

    @pytest.mark.django_db(transaction=True)
    def test_00_invalid_data_signup(self, client):
        invalid_email = "invalid_email"
        invalid_username = "invalid_username@yamdb.fake"
    
        invalid_data = {"email": invalid_email, "username": invalid_username}
        request_type = "POST"
        response = client.post(self.url_signup, data=invalid_data)
    
>       assert (
            response.status_code != 404
        ), f"Страница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*"
E       AssertionError: Страница `/api/v1/auth/signup/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests/test_00_user_registration.py:45: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/auth/signup/
____________ Test00UserRegistration.test_00_valid_data_user_signup _____________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7f44189ea890>
client = <django.test.client.Client object at 0x7f44189eb790>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_user_signup(self, client):
    
        valid_email = "valid@yamdb.fake"
        valid_username = "valid_username"
        outbox_before_count = len(mail.outbox)
    
        valid_data = {"email": valid_email, "username": valid_username}
        request_type = "POST"
        response = client.post(self.url_signup, data=valid_data)
        outbox_after = mail.outbox  # email outbox after user create
    
>       assert (
            response.status_code != 404
        ), f"Страница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*"
E       AssertionError: Страница `/api/v1/auth/signup/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests/test_00_user_registration.py:86: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/auth/signup/
_________ Test00UserRegistration.test_00_obtain_jwt_token_invalid_data _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7f44189fc910>
client = <django.test.client.Client object at 0x7f4418410c90>

    @pytest.mark.django_db(transaction=True)
    def test_00_obtain_jwt_token_invalid_data(self, client):
    
        request_type = "POST"
        response = client.post(self.url_token)
>       assert (
            response.status_code != 404
        ), f"Страница `{self.url_token}` не найдена, проверьте этот адрес в *urls.py*"
E       AssertionError: Страница `/api/v1/auth/token/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests/test_00_user_registration.py:167: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/auth/token/
______ Test00UserRegistration.test_00_registration_me_username_restricted ______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7f441842af90>
client = <django.test.client.Client object at 0x7f44189ea490>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_me_username_restricted(self, client):
        valid_email = "valid@yamdb.fake"
        invalid_username = "me"
        request_type = "POST"
    
        valid_data = {"email": valid_email, "username": invalid_username}
        response = client.post(self.url_signup, data=valid_data)
        code = 400
>       assert response.status_code == code, (
            f"Проверьте, что при {request_type} запросе `{self.url_signup}` "
            f'нельзя создать пользователя с username = "me" и возвращается статус {code}'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/auth/signup/` нельзя создать пользователя с username = "me" и возвращается статус 400
E       assert 404 == 400
E         +404
E         -400

tests/test_00_user_registration.py:220: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/auth/signup/
______ Test00UserRegistration.test_00_registration_same_email_restricted _______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7f44189f4890>
client = <django.test.client.Client object at 0x7f44183addd0>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_same_email_restricted(self, client):
        valid_email_1 = "test_duplicate_1@yamdb.fake"
        valid_email_2 = "test_duplicate_2@yamdb.fake"
        valid_username_1 = "valid_username_1"
        valid_username_2 = "valid_username_2"
        request_type = "POST"
    
        valid_data = {"email": valid_email_1, "username": valid_username_1}
        response = client.post(self.url_signup, data=valid_data)
        code = 200
>       assert response.status_code == code, (
            f"Проверьте, что при {request_type} запросе `{self.url_signup}` "
            f"можно создать пользователя с валидными данными и возвращается статус {code}"
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/auth/signup/` можно создать пользователя с валидными данными и возвращается статус 200
E       assert 404 == 200
E         +404
E         -200

tests/test_00_user_registration.py:236: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/auth/signup/
________________ Test01UserAPI.test_01_users_not_authenticated _________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f441840fa90>
client = <django.test.client.Client object at 0x7f44183d0890>

    @pytest.mark.django_db(transaction=True)
    def test_01_users_not_authenticated(self, client):
        response = client.get("/api/v1/users/")
    
        assert (
            response.status_code != 404
        ), "Страница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*"
    
>       assert (
            response.status_code == 401
        ), "Проверьте, что при GET запросе `/api/v1/users/` без токена авторизации возвращается статус 401"
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/` без токена авторизации возвращается статус 401
E       assert 200 == 401
E         +200
E         -401

tests/test_01_users.py:16: AssertionError
____________ Test01UserAPI.test_02_users_username_not_authenticated ____________

self = <tests.test_01_users.Test01UserAPI object at 0x7f44183bea50>
client = <django.test.client.Client object at 0x7f44189eaad0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_users_username_not_authenticated(self, client, admin):
        response = client.get(f"/api/v1/users/{admin.username}/")
    
>       assert (
            response.status_code != 404
        ), "Страница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*"
E       AssertionError: Страница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <Response status_code=404, "application/json">.status_code

tests/test_01_users.py:24: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestAdmin/
_______________ Test01UserAPI.test_03_users_me_not_authenticated _______________

self = <tests.test_01_users.Test01UserAPI object at 0x7f44183db190>
client = <django.test.client.Client object at 0x7f44183c4b50>

    @pytest.mark.django_db(transaction=True)
    def test_03_users_me_not_authenticated(self, client):
        response = client.get("/api/v1/users/me/")
    
>       assert (
            response.status_code != 404
        ), "Страница `/api/v1/users/me/` не найдена, проверьте этот адрес в *urls.py*"
E       AssertionError: Страница `/api/v1/users/me/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <Response status_code=404, "application/json">.status_code

tests/test_01_users.py:36: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/me/
____________________ Test01UserAPI.test_04_users_get_admin _____________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f441841e6d0>
admin_client = <rest_framework.test.APIClient object at 0x7f4418342850>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_users_get_admin(self, admin_client, admin):
        response = admin_client.get("/api/v1/users/")
        assert (
            response.status_code != 404
        ), "Страница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*"
        assert (
            response.status_code == 200
        ), "Проверьте, что при GET запросе `/api/v1/users/` с токеном авторизации возвращается статус 200"
        data = response.json()
>       assert "count" in data, (
            "Проверьте, что при GET запросе `/api/v1/users/` возвращаете данные с пагинацией. "
            "Не найден параметр `count`"
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/` возвращаете данные с пагинацией. Не найден параметр `count`
E       assert 'count' in [{'bio': 'admin bio', 'email': 'testadmin@yamdb.fake', 'first_name': '', 'last_name': '', ...}]

tests/test_01_users.py:54: AssertionError
__________________ Test01UserAPI.test_04_02_users_get_search ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f44183d1190>
admin_client = <rest_framework.test.APIClient object at 0x7f441834b410>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_02_users_get_search(self, admin_client, admin):
        url = "/api/v1/users/"
        search_url = f"{url}?search={admin.username}"
        response = admin_client.get(search_url)
        assert (
            response.status_code != 404
        ), "Страница `/api/v1/users/?search={username}` не найдена, проверьте этот адрес в *urls.py*"
        reponse_json = response.json()
>       assert "results" in reponse_json and isinstance(
            reponse_json.get("results"), list
        ), (
            "Проверьте, что при GET запросе `/api/v1/users/?search={username}` "
            "результаты возвращаются под ключом `results` и в виде списка."
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/?search={username}` результаты возвращаются под ключом `results` и в виде списка.
E       assert ('results' in [{'bio': 'admin bio', 'email': 'testadmin@yamdb.fake', 'first_name': '', 'last_name': '', ...}])

tests/test_01_users.py:96: AssertionError
________________ Test01UserAPI.test_04_01_users_get_admin_only _________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f441834b5d0>
user_client = <rest_framework.test.APIClient object at 0x7f441835a910>

    @pytest.mark.django_db(transaction=True)
    def test_04_01_users_get_admin_only(self, user_client):
        url = "/api/v1/users/"
        response = user_client.get(url)
        assert (
            response.status_code != 404
        ), f"Страница `{url}` не найдена, проверьте этот адрес в *urls.py*"
        status = 403
>       assert (
            response.status_code == status
        ), f"Проверьте, что при GET запросе `{url}` не для администратора возвращается статус {status}"
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/` не для администратора возвращается статус 403
E       assert 200 == 403
E         +200
E         -403

tests/test_01_users.py:128: AssertionError
__________________ Test01UserAPI.test_05_01_users_post_admin ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f44197f8a10>
admin_client = <rest_framework.test.APIClient object at 0x7f441833f310>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_05_01_users_post_admin(self, admin_client, admin):
        empty_data = {}
        response = admin_client.post("/api/v1/users/", data=empty_data)
        assert (
            response.status_code == 400
        ), "Проверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400"
        no_email_data = {"username": "TestUser_noemail", "role": "user"}
        response = admin_client.post("/api/v1/users/", data=no_email_data)
        assert (
            response.status_code == 400
        ), "Проверьте, что при POST запросе `/api/v1/users/` без email, возвращаетe статус 400"
        valid_email = "valid_email@yamdb.fake"
        no_username_data = {"email": valid_email, "role": "user"}
        response = admin_client.post("/api/v1/users/", data=no_username_data)
        assert (
            response.status_code == 400
        ), "Проверьте, что при POST запросе `/api/v1/users/` без username, возвращаетe статус 400"
        duplicate_email = {
            "username": "TestUser_duplicate",
            "role": "user",
            "email": admin.email,
        }
        response = admin_client.post("/api/v1/users/", data=duplicate_email)
>       assert response.status_code == 400, (
            "Проверьте, что при POST запросе `/api/v1/users/` с уже существующим email, возвращаете статус 400. "
            "`Email` должен быть уникальный у каждого прользователя"
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/users/` с уже существующим email, возвращаете статус 400. `Email` должен быть уникальный у каждого прользователя
E       assert 201 == 400
E         +201
E         -400

tests/test_01_users.py:156: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/users/
WARNING  django.request:log.py:228 Bad Request: /api/v1/users/
WARNING  django.request:log.py:228 Bad Request: /api/v1/users/
________________ Test01UserAPI.test_06_users_username_get_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f441834e550>
admin_client = <rest_framework.test.APIClient object at 0x7f44182ebed0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_admin(self, admin_client, admin):
        user, moderator = create_users_api(admin_client)
        response = admin_client.get(f"/api/v1/users/{admin.username}/")
>       assert (
            response.status_code != 404
        ), "Страница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*"
E       AssertionError: Страница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <Response status_code=404, "application/json">.status_code

tests/test_01_users.py:266: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestAdmin/
______________ Test01UserAPI.test_06_users_username_get_not_admin ______________

self = <tests.test_01_users.Test01UserAPI object at 0x7f44182307d0>
moderator_client = <rest_framework.test.APIClient object at 0x7f4418317ad0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_not_admin(self, moderator_client, admin):
        response = moderator_client.get(f"/api/v1/users/{admin.username}/")
>       assert (
            response.status_code != 404
        ), "Страница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*"
E       AssertionError: Страница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <Response status_code=404, "application/json">.status_code

tests/test_01_users.py:307: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestAdmin/
_____________ Test01UserAPI.test_07_01_users_username_patch_admin ______________

self = <tests.test_01_users.Test01UserAPI object at 0x7f441822e7d0>
admin_client = <rest_framework.test.APIClient object at 0x7f44182ebb50>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_07_01_users_username_patch_admin(self, admin_client, admin):
        user, moderator = create_users_api(admin_client)
        data = {"first_name": "Admin", "last_name": "Test", "bio": "description"}
        response = admin_client.patch(f"/api/v1/users/{admin.username}/", data=data)
>       assert response.status_code == 200, (
            "Проверьте, что при PATCH запросе `/api/v1/users/{username}/` "
            "с токеном авторизации возвращается статус 200"
        )
E       AssertionError: Проверьте, что при PATCH запросе `/api/v1/users/{username}/` с токеном авторизации возвращается статус 200
E       assert 404 == 200
E         +404
E         -200

tests/test_01_users.py:321: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestAdmin/
___________ Test01UserAPI.test_07_02_users_username_patch_moderator ____________

self = <tests.test_01_users.Test01UserAPI object at 0x7f4418350610>
moderator_client = <rest_framework.test.APIClient object at 0x7f441822e990>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_02_users_username_patch_moderator(self, moderator_client, user):
        data = {
            "first_name": "New USer Firstname",
            "last_name": "New USer Lastname",
            "bio": "new user bio",
        }
        response = moderator_client.patch(f"/api/v1/users/{user.username}/", data=data)
>       assert response.status_code == 403, (
            "Проверьте, что при PATCH запросе `/api/v1/users/{username}/` "
            "пользователь с ролью moderator не может изменять данные других пользователей"
        )
E       AssertionError: Проверьте, что при PATCH запросе `/api/v1/users/{username}/` пользователь с ролью moderator не может изменять данные других пользователей
E       assert 404 == 403
E         +404
E         -403

tests/test_01_users.py:356: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
______________ Test01UserAPI.test_07_03_users_username_patch_user ______________

self = <tests.test_01_users.Test01UserAPI object at 0x7f4418323190>
user_client = <rest_framework.test.APIClient object at 0x7f44183bbdd0>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_03_users_username_patch_user(self, user_client, user):
        data = {
            "first_name": "New USer Firstname",
            "last_name": "New USer Lastname",
            "bio": "new user bio",
        }
        response = user_client.patch(f"/api/v1/users/{user.username}/", data=data)
>       assert response.status_code == 403, (
            "Проверьте, что при PATCH запросе `/api/v1/users/{username}/` "
            "пользователь с ролью user не может изменять данные других пользователей"
        )
E       AssertionError: Проверьте, что при PATCH запросе `/api/v1/users/{username}/` пользователь с ролью user не может изменять данные других пользователей
E       assert 404 == 403
E         +404
E         -403

tests/test_01_users.py:369: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_________ Test01UserAPI.test_07_05_users_username_put_user_restricted __________

self = <tests.test_01_users.Test01UserAPI object at 0x7f44182fa8d0>
user_client = <rest_framework.test.APIClient object at 0x7f44189f29d0>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_05_users_username_put_user_restricted(self, user_client, user):
        data = {
            "first_name": "New USer Firstname",
            "last_name": "New USer Lastname",
            "bio": "new user bio",
        }
        response = user_client.put(f"/api/v1/users/{user.username}/", data=data)
        code = 403
>       assert response.status_code == code, (
            "Проверьте, что PUT запрос на `/api/v1/users/{username}/` "
            f"не доступен и возвращается статус {code}"
        )
E       AssertionError: Проверьте, что PUT запрос на `/api/v1/users/{username}/` не доступен и возвращается статус 403
E       assert 404 == 403
E         +404
E         -403

tests/test_01_users.py:383: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_08_01_users_username_delete_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x7f44183bb710>
admin_client = <rest_framework.test.APIClient object at 0x7f4418356590>

    @pytest.mark.django_db(transaction=True)
    def test_08_01_users_username_delete_admin(self, admin_client):
        user, moderator = create_users_api(admin_client)
        response = admin_client.delete(f"/api/v1/users/{user.username}/")
>       assert (
            response.status_code == 204
        ), "Проверьте, что при DELETE запросе `/api/v1/users/{username}/` возвращаете статус 204"
E       AssertionError: Проверьте, что при DELETE запросе `/api/v1/users/{username}/` возвращаете статус 204
E       assert 404 == 204
E         +404
E         -204

tests/test_01_users.py:392: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
___________ Test01UserAPI.test_08_02_users_username_delete_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x7f44183af590>
moderator_client = <rest_framework.test.APIClient object at 0x7f44183bfa10>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_02_users_username_delete_moderator(self, moderator_client, user):
        users_before = get_user_model().objects.count()
        response = moderator_client.delete(f"/api/v1/users/{user.username}/")
>       assert response.status_code == 403, (
            "Проверьте, что при DELETE запросе `/api/v1/users/{username}/`"
            "не от админа, возвращаете статус 403"
        )
E       AssertionError: Проверьте, что при DELETE запросе `/api/v1/users/{username}/`не от админа, возвращаете статус 403
E       assert 404 == 403
E         +404
E         -403

tests/test_01_users.py:403: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_08_03_users_username_delete_user ______________

self = <tests.test_01_users.Test01UserAPI object at 0x7f4418401650>
user_client = <rest_framework.test.APIClient object at 0x7f441822eed0>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_03_users_username_delete_user(self, user_client, user):
        users_before = get_user_model().objects.count()
        response = user_client.delete(f"/api/v1/users/{user.username}/")
>       assert response.status_code == 403, (
            "Проверьте, что при DELETE запросе `/api/v1/users/{username}/` "
            "не от админа, возвращаете статус 403"
        )
E       AssertionError: Проверьте, что при DELETE запросе `/api/v1/users/{username}/` не от админа, возвращаете статус 403
E       assert 404 == 403
E         +404
E         -403

tests/test_01_users.py:416: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
___________ Test01UserAPI.test_08_04_users_username_delete_superuser ___________

self = <tests.test_01_users.Test01UserAPI object at 0x7f441831a750>
user_superuser_client = <rest_framework.test.APIClient object at 0x7f441833f750>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_04_users_username_delete_superuser(self, user_superuser_client, user):
        users_before = get_user_model().objects.count()
        response = user_superuser_client.delete(f"/api/v1/users/{user.username}/")
        code = 204
>       assert response.status_code == code, (
            "Проверьте, что при DELETE запросе `/api/v1/users/{username}/` "
            f"от суперпользователя, возвращаете статус {code}"
        )
E       AssertionError: Проверьте, что при DELETE запросе `/api/v1/users/{username}/` от суперпользователя, возвращаете статус 204
E       assert 404 == 204
E         +404
E         -204

tests/test_01_users.py:430: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
________________ Test01UserAPI.test_09_users_check_permissions _________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f44182f2f10>
admin_client = <rest_framework.test.APIClient object at 0x7f44189eba50>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_09_users_check_permissions(self, admin_client, admin):
        user, moderator = create_users_api(admin_client)
>       self.check_permissions(user, "обычного пользователя", admin)

tests/test_01_users.py:477: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.test_01_users.Test01UserAPI object at 0x7f44182f2f10>
user = <User: TestUser>, user_name = 'обычного пользователя'
admin = <User: TestAdmin>

    def check_permissions(self, user, user_name, admin):
        client_user = auth_client(user)
        response = client_user.get("/api/v1/users/")
>       assert response.status_code == 403, (
            f"Проверьте, что при GET запросе `/api/v1/users/` "
            f"с токеном авторизации {user_name} возвращается статус 403"
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/` с токеном авторизации обычного пользователя возвращается статус 403
E       assert 200 == 403
E         +200
E         -403

tests/test_01_users.py:442: AssertionError
___________________ Test01UserAPI.test_10_users_me_get_admin ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f441830bb90>
admin_client = <rest_framework.test.APIClient object at 0x7f441831a690>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_10_users_me_get_admin(self, admin_client, admin):
        user, moderator = create_users_api(admin_client)
        response = admin_client.get("/api/v1/users/me/")
>       assert (
            response.status_code == 200
        ), "Проверьте, что при GET запросе `/api/v1/users/me/` от админа, возвращается статус 200"
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/me/` от админа, возвращается статус 200
E       assert 404 == 200
E         +404
E         -200

tests/test_01_users.py:484: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/me/
________________ Test01UserAPI.test_11_01_users_me_patch_admin _________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f44189ed850>
admin_client = <rest_framework.test.APIClient object at 0x7f441835f490>

    @pytest.mark.django_db(transaction=True)
    def test_11_01_users_me_patch_admin(self, admin_client):
        user, moderator = create_users_api(admin_client)
        data = {"first_name": "Admin", "last_name": "Test", "bio": "description"}
        response = admin_client.patch("/api/v1/users/me/", data=data)
>       assert (
            response.status_code == 200
        ), "Проверьте, что при PATCH запросе `/api/v1/users/me/` с токеном авторизации возвращается статус 200"
E       AssertionError: Проверьте, что при PATCH запросе `/api/v1/users/me/` с токеном авторизации возвращается статус 200
E       assert 404 == 200
E         +404
E         -200

tests/test_01_users.py:519: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/me/
_________________ Test01UserAPI.test_11_02_users_me_patch_user _________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f4418cf3610>
user_client = <rest_framework.test.APIClient object at 0x7f44184101d0>

    @pytest.mark.django_db(transaction=True)
    def test_11_02_users_me_patch_user(self, user_client):
        data = {
            "first_name": "New user first name",
            "last_name": "New user last name",
            "bio": "new user bio",
        }
        response = user_client.patch("/api/v1/users/me/", data=data)
>       assert response.status_code == 200, (
            "Проверьте, что при PATCH запросе `/api/v1/users/me/`, "
            "пользователь с ролью user может изменить свои данные, и возвращается статус 200"
        )
E       AssertionError: Проверьте, что при PATCH запросе `/api/v1/users/me/`, пользователь с ролью user может изменить свои данные, и возвращается статус 200
E       assert 404 == 200
E         +404
E         -200

tests/test_01_users.py:546: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/me/
_________________ Test02CategoryAPI.test_01_category_not_auth __________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7f4418dc1ed0>
client = <django.test.client.Client object at 0x7f4418e60e90>

    @pytest.mark.django_db(transaction=True)
    def test_01_category_not_auth(self, client):
        response = client.get("/api/v1/categories/")
>       assert (
            response.status_code != 404
        ), "Страница `/api/v1/categories/` не найдена, проверьте этот адрес в *urls.py*"
E       AssertionError: Страница `/api/v1/categories/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests/test_02_category.py:10: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
___________________ Test02CategoryAPI.test_02_category_admin ___________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7f4418d77f50>
admin_client = <rest_framework.test.APIClient object at 0x7f4418d87710>

    @pytest.mark.django_db(transaction=True)
    def test_02_category_admin(self, admin_client):
        data = {}
        response = admin_client.post("/api/v1/categories/", data=data)
>       assert (
            response.status_code == 400
        ), "Проверьте, что при POST запросе `/api/v1/categories/` с не правильными данными возвращает статус 400"
E       AssertionError: Проверьте, что при POST запросе `/api/v1/categories/` с не правильными данными возвращает статус 400
E       assert 404 == 400
E         +404
E         -400

tests/test_02_category.py:21: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
_______________ Test02CategoryAPI.test_03_category_delete_admin ________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7f4418d77210>
admin_client = <rest_framework.test.APIClient object at 0x7f4418e1e210>

    @pytest.mark.django_db(transaction=True)
    def test_03_category_delete_admin(self, admin_client):
        create_categories(admin_client)
        response = admin_client.delete("/api/v1/categories/books/")
>       assert (
            response.status_code == 204
        ), "Проверьте, что при DELETE запросе `/api/v1/categories/{slug}/` возвращаете статус 204"
E       AssertionError: Проверьте, что при DELETE запросе `/api/v1/categories/{slug}/` возвращаете статус 204
E       assert 404 == 204
E         +404
E         -204

tests/test_02_category.py:86: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/books/
__________ Test02CategoryAPI.test_04_category_check_permission_admin ___________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7f44183bf6d0>
client = <django.test.client.Client object at 0x7f4418dd1e10>
admin_client = <rest_framework.test.APIClient object at 0x7f44189ea1d0>

    @pytest.mark.django_db(transaction=True)
    def test_04_category_check_permission_admin(self, client, admin_client):
        categories = create_categories(admin_client)
        data = {"name": "Музыка", "slug": "music"}
        response = client.post("/api/v1/categories/", data=data)
>       assert response.status_code == 401, (
            "Проверьте, что при POST запросе `/api/v1/categories/` "
            "без токена авторизации возвращается статус 401"
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/categories/` без токена авторизации возвращается статус 401
E       assert 404 == 401
E         +404
E         -401

tests/test_02_category.py:125: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
________________ Test02CategoryAPI.test_05_category_create_user ________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7f4418c8f8d0>
user_client = <rest_framework.test.APIClient object at 0x7f4418dd1750>

    @pytest.mark.django_db(transaction=True)
    def test_05_category_create_user(self, user_client):
        url = "/api/v1/categories/"
        data = {"name": "Всякое разное", "slug": "something"}
        response = user_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f"Проверьте, что при POST запросе на `{url}`, создание категорий недоступно для "
            f"пользователя с ролью user"
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/categories/`, создание категорий недоступно для пользователя с ролью user
E       assert 404 == 403
E         +404
E         -403

tests/test_02_category.py:144: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
_____________ Test02CategoryAPI.test_06_category_create_moderator ______________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7f44183aae90>
moderator_client = <rest_framework.test.APIClient object at 0x7f4418ce3510>

    @pytest.mark.django_db(transaction=True)
    def test_06_category_create_moderator(self, moderator_client):
        url = "/api/v1/categories/"
        data = {"name": "Всякое разное", "slug": "something"}
        response = moderator_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f"Проверьте, что при POST запросе на `{url}`, создание категорий недоступно для "
            f"пользователя с ролью moderator"
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/categories/`, создание категорий недоступно для пользователя с ролью moderator
E       assert 404 == 403
E         +404
E         -403

tests/test_02_category.py:155: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
____________________ Test03GenreAPI.test_01_genre_not_auth _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7f4418dd1c90>
client = <django.test.client.Client object at 0x7f4418d7d7d0>

    @pytest.mark.django_db(transaction=True)
    def test_01_genre_not_auth(self, client):
        response = client.get("/api/v1/genres/")
>       assert (
            response.status_code != 404
        ), "Страница `/api/v1/genres/` не найдена, проверьте этот адрес в *urls.py*"
E       AssertionError: Страница `/api/v1/genres/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests/test_03_genre.py:10: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
_________________________ Test03GenreAPI.test_02_genre _________________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7f4418eb2f90>
admin_client = <rest_framework.test.APIClient object at 0x7f4418dd7250>

    @pytest.mark.django_db(transaction=True)
    def test_02_genre(self, admin_client):
        data = {}
        response = admin_client.post("/api/v1/genres/", data=data)
>       assert (
            response.status_code == 400
        ), "Проверьте, что при POST запросе `/api/v1/genres/` с не правильными данными возвращает статус 400"
E       AssertionError: Проверьте, что при POST запросе `/api/v1/genres/` с не правильными данными возвращает статус 400
E       assert 404 == 400
E         +404
E         -400

tests/test_03_genre.py:21: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
_____________________ Test03GenreAPI.test_03_genres_delete _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7f441841e1d0>
admin_client = <rest_framework.test.APIClient object at 0x7f441832b9d0>

    @pytest.mark.django_db(transaction=True)
    def test_03_genres_delete(self, admin_client):
        genres = create_genre(admin_client)
        response = admin_client.delete(f'/api/v1/genres/{genres[0]["slug"]}/')
>       assert (
            response.status_code == 204
        ), "Проверьте, что при DELETE запросе `/api/v1/genres/{slug}/` возвращаете статус 204"
E       AssertionError: Проверьте, что при DELETE запросе `/api/v1/genres/{slug}/` возвращаете статус 204
E       assert 404 == 204
E         +404
E         -204

tests/test_03_genre.py:86: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/horror/
________________ Test03GenreAPI.test_04_genres_check_permission ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7f4418dfa410>
client = <django.test.client.Client object at 0x7f4418d87510>
admin_client = <rest_framework.test.APIClient object at 0x7f4418d87490>

    @pytest.mark.django_db(transaction=True)
    def test_04_genres_check_permission(self, client, admin_client):
        genres = create_genre(admin_client)
        data = {"name": "Боевик", "slug": "action"}
        response = client.post("/api/v1/genres/", data=data)
>       assert response.status_code == 401, (
            "Проверьте, что при POST запросе `/api/v1/genres/` "
            "без токена авторизации возвращается статус 401"
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/genres/` без токена авторизации возвращается статус 401
E       assert 404 == 401
E         +404
E         -401

tests/test_03_genre.py:122: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
___________________ Test03GenreAPI.test_05_genre_create_user ___________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7f4418e1ea50>
user_client = <rest_framework.test.APIClient object at 0x7f441832b790>

    @pytest.mark.django_db(transaction=True)
    def test_05_genre_create_user(self, user_client):
        url = "/api/v1/genres/"
        data = {"name": "Всякое разное", "slug": "something"}
        response = user_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f"Проверьте, что при POST запросе на `{url}`, создание жанров недоступно для "
            f"пользователя с ролью user"
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/genres/`, создание жанров недоступно для пользователя с ролью user
E       assert 404 == 403
E         +404
E         -403

tests/test_03_genre.py:141: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
________________ Test03GenreAPI.test_06_genre_create_moderator _________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7f4418e1e0d0>
moderator_client = <rest_framework.test.APIClient object at 0x7f4418cea750>

    @pytest.mark.django_db(transaction=True)
    def test_06_genre_create_moderator(self, moderator_client):
        url = "/api/v1/genres/"
        data = {"name": "Всякое разное", "slug": "something"}
        response = moderator_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f"Проверьте, что при POST запросе на `{url}`, создание жанров недоступно для "
            f"пользователя с ролью moderator"
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/genres/`, создание жанров недоступно для пользователя с ролью moderator
E       assert 404 == 403
E         +404
E         -403

tests/test_03_genre.py:152: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
____________________ Test04TitleAPI.test_01_title_not_auth _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x7f441840f210>
client = <django.test.client.Client object at 0x7f4418d64650>

    @pytest.mark.django_db(transaction=True)
    def test_01_title_not_auth(self, client):
        response = client.get("/api/v1/titles/")
>       assert (
            response.status_code != 404
        ), "Страница `/api/v1/titles/` не найдена, проверьте этот адрес в *urls.py*"
E       AssertionError: Страница `/api/v1/titles/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests/test_04_title.py:16: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
______________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x7f4418cfd750>
admin_client = <rest_framework.test.APIClient object at 0x7f441840f910>

    @pytest.mark.django_db(transaction=True)
    def test_02_title_admin(self, admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        data = {}
        response = admin_client.post("/api/v1/titles/", data=data)
>       assert (
            response.status_code == 400
        ), "Проверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400"
E       AssertionError: Проверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400
E       assert 404 == 400
E         +404
E         -400

tests/test_04_title.py:29: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
_____________________ Test04TitleAPI.test_03_titles_detail _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x7f4418de1dd0>
client = <django.test.client.Client object at 0x7f4418df4f50>
admin_client = <rest_framework.test.APIClient object at 0x7f4418e57fd0>

    @pytest.mark.django_db(transaction=True)
    def test_03_titles_detail(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests/test_04_title.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:64: in create_titles
    data["id"] = response.json()["id"]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_framework.test.APIClient object at 0x7f4418e57fd0>
response = <HttpResponseNotFound status_code=404, "text/html">, extra = {}

    def _parse_json(self, response, **extra):
        if not hasattr(response, '_json'):
            if not JSON_CONTENT_TYPE_RE.match(response.get('Content-Type')):
                raise ValueError(
                    'Content-Type header is "{0}", not "application/json"'
>                   .format(response.get('Content-Type'))
                )
E               ValueError: Content-Type header is "text/html", not "application/json"

venv/lib/python3.7/site-packages/django/test/client.py:668: ValueError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
________________ Test04TitleAPI.test_04_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x7f44181e9e10>
client = <django.test.client.Client object at 0x7f4418e4dd90>
admin_client = <rest_framework.test.APIClient object at 0x7f44189f2750>

    @pytest.mark.django_db(transaction=True)
    def test_04_titles_check_permission(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests/test_04_title.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:64: in create_titles
    data["id"] = response.json()["id"]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_framework.test.APIClient object at 0x7f44189f2750>
response = <HttpResponseNotFound status_code=404, "text/html">, extra = {}

    def _parse_json(self, response, **extra):
        if not hasattr(response, '_json'):
            if not JSON_CONTENT_TYPE_RE.match(response.get('Content-Type')):
                raise ValueError(
                    'Content-Type header is "{0}", not "application/json"'
>                   .format(response.get('Content-Type'))
                )
E               ValueError: Content-Type header is "text/html", not "application/json"

venv/lib/python3.7/site-packages/django/test/client.py:668: ValueError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
___________________ Test05ReviewAPI.test_01_review_not_auth ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7f4418d6c790>
client = <django.test.client.Client object at 0x7f44183c4f90>
admin_client = <rest_framework.test.APIClient object at 0x7f4418401b90>

    @pytest.mark.django_db(transaction=True)
    def test_01_review_not_auth(self, client, admin_client):
>       titles, _, _ = create_titles(admin_client)

tests/test_05_review.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:64: in create_titles
    data["id"] = response.json()["id"]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_framework.test.APIClient object at 0x7f4418401b90>
response = <HttpResponseNotFound status_code=404, "text/html">, extra = {}

    def _parse_json(self, response, **extra):
        if not hasattr(response, '_json'):
            if not JSON_CONTENT_TYPE_RE.match(response.get('Content-Type')):
                raise ValueError(
                    'Content-Type header is "{0}", not "application/json"'
>                   .format(response.get('Content-Type'))
                )
E               ValueError: Content-Type header is "text/html", not "application/json"

venv/lib/python3.7/site-packages/django/test/client.py:668: ValueError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
_____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7f441835d290>
admin_client = <rest_framework.test.APIClient object at 0x7f4418247d10>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
>       titles, _, _ = create_titles(admin_client)

tests/test_05_review.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:64: in create_titles
    data["id"] = response.json()["id"]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_framework.test.APIClient object at 0x7f4418247d10>
response = <HttpResponseNotFound status_code=404, "text/html">, extra = {}

    def _parse_json(self, response, **extra):
        if not hasattr(response, '_json'):
            if not JSON_CONTENT_TYPE_RE.match(response.get('Content-Type')):
                raise ValueError(
                    'Content-Type header is "{0}", not "application/json"'
>                   .format(response.get('Content-Type'))
                )
E               ValueError: Content-Type header is "text/html", not "application/json"

venv/lib/python3.7/site-packages/django/test/client.py:668: ValueError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
____________________ Test05ReviewAPI.test_03_review_detail _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7f4418d374d0>
client = <django.test.client.Client object at 0x7f441841e410>
admin_client = <rest_framework.test.APIClient object at 0x7f4418dac5d0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests/test_05_review.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/common.py:64: in create_titles
    data["id"] = response.json()["id"]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_framework.test.APIClient object at 0x7f4418dac5d0>
response = <HttpResponseNotFound status_code=404, "text/html">, extra = {}

    def _parse_json(self, response, **extra):
        if not hasattr(response, '_json'):
            if not JSON_CONTENT_TYPE_RE.match(response.get('Content-Type')):
                raise ValueError(
                    'Content-Type header is "{0}", not "application/json"'
>                   .format(response.get('Content-Type'))
                )
E               ValueError: Content-Type header is "text/html", not "application/json"

venv/lib/python3.7/site-packages/django/test/client.py:668: ValueError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
_______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7f4418e8c410>
client = <django.test.client.Client object at 0x7f441835a750>
admin_client = <rest_framework.test.APIClient object at 0x7f441835fed0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests/test_05_review.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/common.py:64: in create_titles
    data["id"] = response.json()["id"]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_framework.test.APIClient object at 0x7f441835fed0>
response = <HttpResponseNotFound status_code=404, "text/html">, extra = {}

    def _parse_json(self, response, **extra):
        if not hasattr(response, '_json'):
            if not JSON_CONTENT_TYPE_RE.match(response.get('Content-Type')):
                raise ValueError(
                    'Content-Type header is "{0}", not "application/json"'
>                   .format(response.get('Content-Type'))
                )
E               ValueError: Content-Type header is "text/html", not "application/json"

venv/lib/python3.7/site-packages/django/test/client.py:668: ValueError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
__________________ Test06CommentAPI.test_01_comment_not_auth ___________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7f44183db810>
client = <django.test.client.Client object at 0x7f44183bbc10>
admin_client = <rest_framework.test.APIClient object at 0x7f4418342ed0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests/test_06_comment.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/common.py:64: in create_titles
    data["id"] = response.json()["id"]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_framework.test.APIClient object at 0x7f4418342ed0>
response = <HttpResponseNotFound status_code=404, "text/html">, extra = {}

    def _parse_json(self, response, **extra):
        if not hasattr(response, '_json'):
            if not JSON_CONTENT_TYPE_RE.match(response.get('Content-Type')):
                raise ValueError(
                    'Content-Type header is "{0}", not "application/json"'
>                   .format(response.get('Content-Type'))
                )
E               ValueError: Content-Type header is "text/html", not "application/json"

venv/lib/python3.7/site-packages/django/test/client.py:668: ValueError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
_______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7f441832ba50>
admin_client = <rest_framework.test.APIClient object at 0x7f44189efb10>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests/test_06_comment.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/common.py:64: in create_titles
    data["id"] = response.json()["id"]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_framework.test.APIClient object at 0x7f44189efb10>
response = <HttpResponseNotFound status_code=404, "text/html">, extra = {}

    def _parse_json(self, response, **extra):
        if not hasattr(response, '_json'):
            if not JSON_CONTENT_TYPE_RE.match(response.get('Content-Type')):
                raise ValueError(
                    'Content-Type header is "{0}", not "application/json"'
>                   .format(response.get('Content-Type'))
                )
E               ValueError: Content-Type header is "text/html", not "application/json"

venv/lib/python3.7/site-packages/django/test/client.py:668: ValueError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
____________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7f4418d52810>
client = <django.test.client.Client object at 0x7f4418d531d0>
admin_client = <rest_framework.test.APIClient object at 0x7f4418d53a90>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
        comments, reviews, titles, user, moderator = create_comments(
>           admin_client, admin
        )

tests/test_06_comment.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:125: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/common.py:64: in create_titles
    data["id"] = response.json()["id"]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_framework.test.APIClient object at 0x7f4418d53a90>
response = <HttpResponseNotFound status_code=404, "text/html">, extra = {}

    def _parse_json(self, response, **extra):
        if not hasattr(response, '_json'):
            if not JSON_CONTENT_TYPE_RE.match(response.get('Content-Type')):
                raise ValueError(
                    'Content-Type header is "{0}", not "application/json"'
>                   .format(response.get('Content-Type'))
                )
E               ValueError: Content-Type header is "text/html", not "application/json"

venv/lib/python3.7/site-packages/django/test/client.py:668: ValueError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
______________ Test06CommentAPI.test_04_comment_check_permission _______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7f441832b950>
client = <django.test.client.Client object at 0x7f44183c97d0>
admin_client = <rest_framework.test.APIClient object at 0x7f44183239d0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
        comments, reviews, titles, user, moderator = create_comments(
>           admin_client, admin
        )

tests/test_06_comment.py:248: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:125: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/common.py:64: in create_titles
    data["id"] = response.json()["id"]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_framework.test.APIClient object at 0x7f44183239d0>
response = <HttpResponseNotFound status_code=404, "text/html">, extra = {}

    def _parse_json(self, response, **extra):
        if not hasattr(response, '_json'):
            if not JSON_CONTENT_TYPE_RE.match(response.get('Content-Type')):
                raise ValueError(
                    'Content-Type header is "{0}", not "application/json"'
>                   .format(response.get('Content-Type'))
                )
E               ValueError: Content-Type header is "text/html", not "application/json"

venv/lib/python3.7/site-packages/django/test/client.py:668: ValueError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/genres/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/categories/
WARNING  django.request:log.py:228 Not Found: /api/v1/titles/
--------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ============================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin - Asser...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only
FAILED tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user
FAILED tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user
FAILED tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions
FAILED tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin - As...
FAILED tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth
FAILED tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator
FAILED tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth - Asser...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_02_genre - AssertionError...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete - Assert...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission
FAILED tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user - As...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator
FAILED tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth - Asser...
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail - ValueE...
FAILED tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission
FAILED tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth - Va...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - Value...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - Valu...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - ValueErr...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - Va...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
========================= 51 failed, 2 passed in 4.62s =========================
